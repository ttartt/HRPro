@{
    ViewData["Title"] = "Вход";
    Layout = "_LoginLayout";
}


<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow-lg rounded">
                <div class="card-header text-center rounded-top">
                    <h3 class="mb-0"><strong>Вход в приложение</strong></h3>
                </div>
                <div class="card-body p-4">
                    <form method="post" class="row g-3 needs-validation" novalidate>
                        <div class="form-group mb-3">
                            <label for="login" class="form-label">Логин:</label>
                            <input type="text" class="form-control" id="login" name="login" required>
                        </div>
                        <div class="form-group mb-3">
                            <label for="password" class="form-label">Пароль:</label>
                            <input type="password" class="form-control" id="password" name="password" required>
                        </div>
                        <div class="form-group text-center mt-4">
                            <button type="submit" class="btn btn-primary w-100 py-2">Войти</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const form = document.querySelector("form.needs-validation");

        form.addEventListener("submit", function (event) {
            event.preventDefault();

            const formData = new FormData(form);

            fetch(form.action, {
                method: "POST",
                body: formData
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error("Ошибка сети или сервера");
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        window.location.href = data.redirectUrl;
                    } else {
                        showToast(data.message, "danger");
                    }
                })
                .catch(error => {
                    showToast("Произошла ошибка при обработке запроса: " + error.message, "danger");
                });
        });
    });

    function showToast(message, type = "success") {
        let toastContainer = document.querySelector(".toast-container");
        if (!toastContainer) {
            toastContainer = document.createElement("div");
            toastContainer.className = "toast-container position-fixed top-0 end-0 p-3";
            document.body.appendChild(toastContainer);
        }

        const toast = document.createElement("div");
        toast.className = `toast show align-items-center text-white bg-${type} border-0`;
        toast.setAttribute("role", "alert");
        toast.setAttribute("aria-live", "assertive");
        toast.setAttribute("aria-atomic", "true");

        toast.innerHTML = `
                            <div class="d-flex">
                                <div class="toast-body">${message}</div>
                                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Закрыть"></button>
                            </div>
                        `;

        toast.querySelector("button").addEventListener("click", () => toast.remove());
        toastContainer.appendChild(toast);

        setTimeout(() => toast.remove(), 5000);
    }
</script>

<style>
    body {
        font-family: Play;
        background-color: #f0f4f7;
    }

    .card {
        border-radius: 10px;
        padding-left: 100px;
        padding-right: 100px;
        padding-top: 40px;
        padding-bottom: 40px;

    }

    .card-header {
        background-color: inherit;
        color: inherit; 
        border-bottom: none; 
    }

    .form-control {
        border-radius: 10px;
        box-shadow: none;
        transition: all 0.3s ease;
    }

    .form-control:focus {
        border-color: #0A1128;
        box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
    }

    .btn {
        background-color: #3E12E3;
        color: white;
        border: none;
        border-radius: 10px;
        padding: 12px;
        font-size: 16px;
        transition: background-color 0.3s ease, transform 0.2s ease;
    }

    .btn:hover {
        background-color: #2200A4;
        transform: scale(1.05);
    }

    .text-muted {
        font-size: 14px;
    }

    .text-muted:hover {
        text-decoration: underline;
    }
</style>
<style>
    .btn-yandex {
        background-color: #FFCC00;
        color: #000;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        font-weight: 500;
    }

        .btn-yandex:hover {
            background-color: #e6b800;
            color: #000;
        }

    .alert {
        border-radius: 8px;
    }
</style>
