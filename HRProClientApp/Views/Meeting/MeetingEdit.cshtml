@using HRProContracts.ViewModels
@using HRProDataModels.Enums
@model MeetingViewModel

@{
    var title = "Встреча";
}

<div class="container">
    <h1>@title</h1>
    <form method="post" class="row g-3 needs-validation" novalidate>
        <input type="hidden" name="Id" value="@Model?.Id" />
        <input type="hidden" name="GoogleEventId" value="@Model?.GoogleEventId" />

        <div class="col-md-6">
            <label for="Topic" class="form-label">Тема собеседования <span class="text-danger">*</span></label>
            <input type="text" class="form-control" id="Topic" name="Topic" value="@Model?.Topic" required placeholder="Введите тему собеседования">
            <div class="invalid-feedback">Пожалуйста, введите тему собеседования.</div>
        </div>

        <div class="col-md-6">
            <label for="VacancyId" class="form-label">Вакансия</label>
            <select id="VacancyId" name="VacancyId" class="form-select">
                <option value="" selected>Выбрать вакансию</option>
                @foreach (var item in ViewBag.Vacancies)
                {
                    <option value="@item.Id">@item.JobTitle</option>
                }
            </select>
        </div>

        <div class="col-md-6">
            <label for="ResumeId" class="form-label">Резюме</label>
            <select id="ResumeId" name="ResumeId" class="form-select">
                <option value="" selected>Выбрать резюме</option>
                @foreach (var item in ViewBag.Resumes)
                {
                    <option value="@item.Id">@item.Title</option>
                }
            </select>
        </div>

        <div class="col-md-6">
            <label for="Date" class="form-label">Дата собеседования <span class="text-danger">*</span></label>
            <input type="date" class="form-control" id="Date" name="Date" value="@Model?.Date.ToString("yyyy-MM-dd")" required>
            <div class="invalid-feedback">Пожалуйста, выберите дату собеседования.</div>
        </div>

        <div class="col-md-6">
            <label for="TimeFrom" class="form-label">Время начала <span class="text-danger">*</span></label>
            <input type="time" class="form-control" id="TimeFrom" name="TimeFrom" value="@Model?.TimeFrom.ToString("HH:mm")" required>
            <div class="invalid-feedback">Пожалуйста, выберите время начала собеседования.</div>
        </div>

        <div class="col-md-6">
            <label for="TimeTo" class="form-label">Время окончания <span class="text-danger">*</span></label>
            <input type="time" class="form-control" id="TimeTo" name="TimeTo" value="@Model?.TimeTo.ToString("HH:mm")" required>
            <div class="invalid-feedback">Пожалуйста, выберите время окончания собеседования.</div>
        </div>

        <div class="col-md-6">
            <label for="Place" class="form-label">Место проведения <span class="text-danger">*</span></label>
            <input type="text" class="form-control" id="Place" name="Place" value="@Model?.Place" placeholder="Введите место проведения" required>
        </div>

        <div class="col-md-6">
            <label for="Comment" class="form-label">Комментарий <span class="text-danger">*</span></label>
            <textarea class="form-control" id="Comment" name="Comment" rows="3" placeholder="Введите комментарий" required>@Model?.Comment</textarea>
        </div>

        <div class="col-12">
            <h3>Приглашение сотрудников</h3>
            <div class="mb-3">
                <input type="text" class="form-control" id="employeeSearch" placeholder="Поиск по имени или фамилии">
            </div>
            <div id="employeeList" class="border rounded p-2 bg-light" style="max-height: 300px; overflow-y: auto;">
                @foreach (var employee in ViewBag.Employees)
                {
                    bool isInvited = ViewBag.InvitedEmployeeIds != null && ViewBag.InvitedEmployeeIds.Contains(employee.Id);
                    <div class="employee-item form-check mb-2">
                        <input class="form-check-input"
                               type="checkbox"
                               value="@employee.Id"
                               id="employee@employee.Id"
                               name="SelectedParticipantIds"
                        @(isInvited ? "checked" : "")>
                        <label class="form-check-label" for="employee@employee.Id">
                            @employee.Name @employee.Surname
                        </label>
                    </div>
                }
            </div>
            <div id="noResults" class="text-muted mt-2" style="display: none;">Нет результатов</div>
        </div>

        <div class="col-md-6">
            <button type="submit" class="btn btn-primary">Сохранить</button>
            <button type="button" class="btn btn-secondary" onclick="window.history.back();">Назад</button>
        </div>
    </form>
</div>

<script>
    (function () {
        'use strict'

        var forms = document.querySelectorAll('.needs-validation')

        Array.prototype.slice.call(forms)
            .forEach(function (form) {
                form.addEventListener('submit', function (event) {
                    if (!form.checkValidity()) {
                        event.preventDefault()
                        event.stopPropagation()
                    }

                    form.classList.add('was-validated')
                }, false)
            })
    })()


    document.addEventListener("DOMContentLoaded", function () {
        const form = document.querySelector("form.needs-validation");

        form.addEventListener("submit", function (event) {
            event.preventDefault();

            const formData = new FormData(form);
            
            fetch(form.action, {
                method: "POST",
                body: formData
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error("Ошибка сети или сервера");
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        console.log(data.redirectUrl);
                        window.location.href = data.redirectUrl;
                    } else {
                        showToast(data.message, "danger");
                    }
                })
                .catch(error => {
                    showToast("Произошла ошибка при обработке запроса: " + error.message, "danger");
                });
        });
         const employeeSearch = document.getElementById('employeeSearch');
        const employeeList = document.getElementById('employeeList');
        const noResults = document.getElementById('noResults');
        const employeeItems = Array.from(employeeList.getElementsByClassName('employee-item'));

        employeeSearch.addEventListener('input', function () {
            const searchTerm = this.value.toLowerCase();
            let visibleCount = 0;

            employeeItems.forEach(item => {
                const label = item.querySelector('.form-check-label').textContent.toLowerCase();
                if (label.includes(searchTerm)) {
                    item.style.display = 'flex';
                    visibleCount++;
                } else {
                    item.style.display = 'none';
                }
            });

            noResults.style.display = visibleCount === 0 ? 'block' : 'none';
        });

    });

    function showToast(message, type = 'success') {
        let toastContainer = document.querySelector('.toast-container');
        if (!toastContainer) {
            toastContainer = document.createElement('div');
            toastContainer.className = 'toast-container position-fixed top-0 end-0 p-3';
            document.body.appendChild(toastContainer);
        }

        const toast = document.createElement('div');
        toast.className = `toast show align-items-center text-white bg-${type} border-0`;
        toast.setAttribute('role', 'alert');
        toast.setAttribute('aria-live', 'assertive');
        toast.setAttribute('aria-atomic', 'true');

        toast.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">${message}</div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Закрыть"></button>
                </div>
            `;

        toast.querySelector('button').addEventListener('click', () => toast.remove());
        toastContainer.appendChild(toast);

        setTimeout(() => toast.remove(), 5000);
    }
</script>

<style>
    .btn {
        background-color: #3E12E3;
        color: white;
        border: none;
        border-radius: 10px;
        padding: 12px;
        font-size: 16px;
        transition: background-color 0.3s ease, transform 0.2s ease;
    }

    .btn:hover {
        background-color: #2200A4;
        transform: scale(1.05);
    }

    .employee-item {
        display: flex;
        align-items: center;
        padding: 8px 10px;
        transition: all 0.3s ease;
    }

    .form-check-input {
        opacity: 1 !important;
        position: static !important;
        margin-right: 10px !important;
        margin-left: 0 !important;
        width: 1.2em !important;
        height: 1.2em !important;
    }

    #employeeList {
        max-height: 300px;
        overflow-y: auto;
        padding: 10px;
        background-color: #f8f9fa;
        border-radius: 5px;
    }
</style>