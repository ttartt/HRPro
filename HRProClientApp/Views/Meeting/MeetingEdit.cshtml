@using HRProContracts.ViewModels
@using HRProDataModels.Enums
@model MeetingViewModel

@{
    var title = "Собеседование";
}

<div class="container">
    <h1>@title</h1>
    <form method="post" class="row g-3 needs-validation" novalidate>
        <input type="hidden" name="Id" value="@Model?.Id" />

        <div class="col-md-6">
            <label for="Topic" class="form-label">Тема собеседования <span class="text-danger">*</span></label>
            <input type="text" class="form-control" id="Topic" name="Topic" value="@Model?.Topic" required placeholder="Введите тему собеседования">
            <div class="invalid-feedback">Пожалуйста, введите тему собеседования.</div>
        </div>

        <div class="col-md-6">
            <label for="VacancyId" class="form-label">Вакансия <span class="text-danger">*</span></label>
            <select id="VacancyId" name="VacancyId" class="form-select" required>
                <option value="" selected>Выбрать вакансию</option>
                @foreach (var item in ViewBag.Vacancies)
                {
                    <option value="@item.Id">@item.JobTitle</option>
                }
            </select>
        </div>

        <div class="col-md-6">
            <label for="ResumeId" class="form-label">Резюме <span class="text-danger">*</span></label>
            <select id="ResumeId" name="ResumeId" class="form-select" required>
                <option value="" selected>Выбрать резюме</option>
                @foreach (var item in ViewBag.Resumes)
                {
                    <option value="@item.Id">@item.Title</option>
                }
            </select>
        </div>


        <div class="col-md-6">
            <label for="Date" class="form-label">Дата собеседования <span class="text-danger">*</span></label>
            <input type="date" class="form-control" id="Date" name="Date" value="@Model?.Date.ToString("yyyy-MM-dd")" required>
            <div class="invalid-feedback">Пожалуйста, выберите дату собеседования.</div>
        </div>

        <div class="col-md-6">
            <label for="TimeFrom" class="form-label">Время начала <span class="text-danger">*</span></label>
            <input type="time" class="form-control" id="TimeFrom" name="TimeFrom" value="@Model?.TimeFrom.ToString("HH:mm")" required>
            <div class="invalid-feedback">Пожалуйста, выберите время начала собеседования.</div>
        </div>

        <div class="col-md-6">
            <label for="TimeTo" class="form-label">Время окончания <span class="text-danger">*</span></label>
            <input type="time" class="form-control" id="TimeTo" name="TimeTo" value="@Model?.TimeTo.ToString("HH:mm")" required>
            <div class="invalid-feedback">Пожалуйста, выберите время окончания собеседования.</div>
        </div>

        <div class="col-md-6">
            <label for="Place" class="form-label">Место проведения <span class="text-danger">*</span></label>
            <input type="text" class="form-control" id="Place" name="Place" value="@Model?.Place" placeholder="Введите место проведения">
        </div>

        <div class="col-md-6">
            <label for="Comment" class="form-label">Комментарий <span class="text-danger">*</span></label>
            <textarea class="form-control" id="Comment" name="Comment" rows="3" placeholder="Введите комментарий">@Model?.Comment</textarea>
        </div>

        <div class="col-md-6">
            <button type="submit" class="btn btn-primary">Сохранить</button>
            <button type="button" class="btn btn-secondary" onclick="window.history.back();">Назад</button>
        </div>

        @* <div class="col-md-6">
            <button type="button" class="btn btn-info" data-bs-toggle="modal" data-bs-target="#inviteParticipantsModal">
                Пригласить участников
            </button>
        </div> *@
    </form>
</div>

<div class="modal fade" id="inviteParticipantsModal" tabindex="-1" aria-labelledby="inviteParticipantsModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form method="post" asp-controller="Meeting" asp-action="InviteParticipants" asp-route-meetingId="@Model?.Id" novalidate>
                <div class="modal-header">
                    <h5 class="modal-title" id="inviteParticipantsModalLabel">Выбор участников</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Закрыть"></button>
                </div>
                <div class="modal-body">
                    @foreach (var user in ViewBag.Users)
                    {
                        bool isInvited = ViewBag.InvitedUserIds != null && ViewBag.InvitedUserIds.Contains(user.Id);

                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" value="@user.Id" id="participant@user.Id" name="userIds[]"
                            @if (isInvited)
                            {
                                <text>checked</text>
                            } />
                            <label class="form-check-label" for="participant@user.Id">
                                @user.Name @user.Surname
                            </label>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-info"
                            data-bs-toggle="modal"
                            data-bs-target="#inviteParticipantsModal"
                            data-meeting-id="@Model?.Id">
                        Пригласить участников
                    </button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Закрыть</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    (function () {
        'use strict'

        var forms = document.querySelectorAll('.needs-validation')

        Array.prototype.slice.call(forms)
            .forEach(function (form) {
                form.addEventListener('submit', function (event) {
                    if (!form.checkValidity()) {
                        event.preventDefault()
                        event.stopPropagation()
                    }

                    form.classList.add('was-validated')
                }, false)
            })
    })()

    document.addEventListener("DOMContentLoaded", function () {
        const form = document.querySelector("form.needs-validation");

        form.addEventListener("submit", function (event) {
            event.preventDefault();

            const formData = new FormData(form);

            fetch(form.action, {
                method: "POST",
                body: formData
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error("Ошибка сети или сервера");
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        window.location.href = data.redirectUrl;
                    } else {
                        showToast(data.message, "danger");
                    }
                })
                .catch(error => {
                    showToast("Произошла ошибка при обработке запроса: " + error.message, "danger");
                });
        });
    });

    function showToast(message, type = "success") {
        let toastContainer = document.querySelector(".toast-container");
        if (!toastContainer) {
            toastContainer = document.createElement("div");
            toastContainer.className = "toast-container position-fixed top-0 end-0 p-3";
            document.body.appendChild(toastContainer);
        }

        const toast = document.createElement("div");
        toast.className = `toast show align-items-center text-white bg-${type} border-0`;
        toast.setAttribute("role", "alert");
        toast.setAttribute("aria-live", "assertive");
        toast.setAttribute("aria-atomic", "true");

        toast.innerHTML = `
                        <div class="d-flex">
                            <div class="toast-body">${message}</div>
                            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Закрыть"></button>
                        </div>
                    `;

        toast.querySelector("button").addEventListener("click", () => toast.remove());
        toastContainer.appendChild(toast);

        setTimeout(() => toast.remove(), 5000);
    }
</script>

<style>
    .btn {
        background-color: #3E12E3;
        color: white;
        border: none;
        border-radius: 10px;
        padding: 12px;
        font-size: 16px;
        transition: background-color 0.3s ease, transform 0.2s ease;
    }

        .btn:hover {
            background-color: #2200A4;
            transform: scale(1.05);
        }
</style>
