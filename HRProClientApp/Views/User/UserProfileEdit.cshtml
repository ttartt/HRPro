@using HRProContracts.ViewModels
@using HRProDataModels.Enums
@model UserViewModel

@{
    var title = Model?.Id <= 0 ? "Добавить сотрудника" : "Редактировать профиль";
    var userRole = APIClient.User?.Role == HRProDataModels.Enums.RoleEnum.Администратор;
}

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <h2 class="mb-4">@title</h2>
            <form method="post" class="needs-validation" novalidate>
                <input type="hidden" name="id" value="@Model?.Id" />
                <input type="hidden" name="CompanyId" value="@Model?.CompanyId" />
                @if (Model?.Id > 0)
                {
                    <input type="hidden" name="password" value="@Model?.Password" />
                }

                <div class="mb-3">
                    <label for="Surname" class="form-label">Фамилия <span class="text-danger">*</span></label>
                    <input type="text" class="form-control" id="Surname" name="Surname" value="@Model?.Surname" required />
                    <div class="invalid-feedback">Пожалуйста, укажите фамилию</div>
                </div>

                <div class="mb-3">
                    <label for="Name" class="form-label">Имя <span class="text-danger">*</span></label>
                    <input type="text" class="form-control" id="Name" name="Name" value="@Model?.Name" required />
                    <div class="invalid-feedback">Пожалуйста, укажите имя</div>
                </div>

                <div class="mb-3">
                    <label for="LastName" class="form-label">Отчество</label>
                    <input type="text" class="form-control" id="LastName" name="LastName" value="@Model?.LastName" />
                </div>

                @if (APIClient.User?.Role == HRProDataModels.Enums.RoleEnum.Администратор)
                {
                    <div class="mb-3">
                        <label asp-for="Role" class="form-label">Роль</label>
                        <div class="input-group">
                            <select asp-for="Role" class="form-select" asp-items="@GetRoleSelectList()" required>
                            </select>
                        </div>
                    </div>
                }

                <div class="mb-3">
                    <label for="Email" class="form-label">Электронная почта <span class="text-danger">*</span></label>
                    <input type="email" class="form-control" id="Email" name="Email" value="@Model?.Email"
                    @(Model?.Id > 0 ? "readonly" : "") required />

                    @if (Model?.Id > 0 && APIClient.User?.Role != RoleEnum.Администратор)
                    {
                        <div class="form-text @(Model.IsEmailConfirmed ? "text-success" : "text-danger")">
                            Email @(Model.IsEmailConfirmed ? "подтвержден" : "не подтвержден")
                        </div>
                    }

                    <div class="invalid-feedback">Пожалуйста, укажите корректный email</div>
                </div>

                @if (!APIClient.User.IsEmailConfirmed && APIClient.User.Role != RoleEnum.Администратор)
                {
                    <button type="button" class="btn btn-info btn-sm me-2" data-bs-toggle="modal" data-bs-target="#confirmEmailModal"
                            title="Подтвердить Email" onclick="sendNewCode()">
                        Подтвердить Email
                    </button>
                }

                <div class="modal" id="confirmEmailModal">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Подтверждение email</h5>
                            </div>
                            <div class="modal-body">
                                <input type="text" id="confirmCode" class="form-control" placeholder="Введите код">
                            </div>
                            <div class="modal-footer">
                                <button onclick="confirmEmail()" class="btn btn-primary">Подтвердить</button>
                                <button onclick="sendNewCode()" class="btn btn-secondary">Отправить новый код</button>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="mb-3">
                    <label for="dateOfBirth" class="form-label">Дата рождения</label>
                    <input type="date" class="form-control" id="dateOfBirth" name="dateOfBirth"
                           max="@DateTime.Now.ToString("yyyy-MM-dd")"
                           value="@Model?.DateOfBirth.ToString()">
                    <div class="invalid-feedback">Выберите корректную дату рождения</div>
                </div>

                @if (Model?.Id <= 0)
                {
                    <div class="mb-3">
                        <label for="Password" class="form-label">Пароль <span class="text-danger">*</span></label>
                        <div class="input-group">
                            <input type="password" class="form-control" id="Password" name="Password" required />
                            <button class="btn btn-outline-secondary toggle-password" type="button">
                                <i class="bi bi-eye-slash"></i>
                            </button>
                        </div>
                        <div class="form-text">
                            Пароль должен содержать:
                            <ul class="list-unstyled">
                                <li><small>- Не менее 8 символов</small></li>
                                <li><small>- Буквы в верхнем и нижнем регистре</small></li>
                                <li><small>- Хотя бы одну цифру</small></li>
                                <li><small>- Хотя бы один специальный символ</small></li>
                            </ul>
                        </div>
                        <div class="invalid-feedback">Пароль не соответствует требованиям</div>
                    </div>
                }
                @if (Model?.Id > 0 && APIClient.User.Role != RoleEnum.Администратор)
                {
                    <button type="button" class="btn btn-info btn-sm me-2" data-bs-toggle="modal" data-bs-target="#resetPasswordModal"
                            title="Изменить пароль">
                        <i class="bi bi-key"></i> Изменить пароль
                    </button>
                }

                <div class="modal fade" id="resetPasswordModal" tabindex="-1" aria-labelledby="resetPasswordModalLabel" aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered">
                        <div class="modal-content">
                            <div class="modal-header bg-light">
                                <h5 class="modal-title" id="resetPasswordModalLabel">Изменение пароля</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Закрыть"></button>
                            </div>
                            <div class="modal-body">
                                <div class="mb-3">
                                    <label for="newPassword" class="form-label">Новый пароль</label>
                                    <div class="input-group">
                                        <input type="password" id="newPassword" class="form-control" placeholder="Введите новый пароль">
                                        <button class="btn btn-outline-secondary toggle-password" type="button">
                                            <i class="bi bi-eye"></i>
                                        </button>
                                    </div>
                                </div>

                                <div class="mb-3">
                                    <label for="newPasswordConfirmation" class="form-label">Подтверждение пароля</label>
                                    <div class="input-group">
                                        <input type="password" id="newPasswordConfirmation" class="form-control" placeholder="Повторите новый пароль">
                                        <button class="btn btn-outline-secondary toggle-password" type="button">
                                            <i class="bi bi-eye"></i>
                                        </button>
                                    </div>
                                </div>

                                <div class="alert alert-info mb-0">
                                    <small>Пароль должен содержать:</small>
                                    <ul class="mb-0">
                                        <li><small>Не менее 8 символов</small></li>
                                        <li><small>Буквы в верхнем и нижнем регистре</small></li>
                                        <li><small>Хотя бы одну цифру</small></li>
                                        <li><small>Хотя бы один специальный символ</small></li>
                                    </ul>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
                                <button type="button" onclick="resetPassword()" class="btn btn-primary">Сохранить</button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="mb-3">
                    <label for="PhoneNumber" class="form-label">Телефон</label>
                    <input type="tel" class="form-control" id="PhoneNumber" name="PhoneNumber"
                           value="@Model?.PhoneNumber" />
                </div>

                <div class="d-flex justify-content-between mt-4">
                    <button type="submit" class="btn btn-primary">Сохранить</button>
                    <button type="button" class="btn btn-secondary" onclick="window.history.back()">Назад</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .btn {
            background-color: #0A1128;
            color: white;
            border: none;
            border-radius: 10px;
            padding: 12px;
            font-size: 16px;
            transition: background-color 0.3s ease, transform 0.2s ease;
        }

            .btn:hover {
                background-color: #1C3273;
                transform: scale(1.05);
            }

        .toggle-password {
            border-top-left-radius: 0;
            border-bottom-left-radius: 0;
        }

        .input-group-text {
            cursor: pointer;
        }
    </style>
}

@functions {
    public SelectList GetRoleSelectList()
    {
        var roles = Enum.GetValues(typeof(RoleEnum))
                       .Cast<RoleEnum>()
                       .Where(r => r != RoleEnum.Неизвестен)
                       .ToList();

        return new SelectList(roles, "Выберите роль...");
    }
}

@section Scripts {
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.inputmask/5.0.7-beta.29/jquery.inputmask.min.js"></script>

    <script>
        (function () {
            'use strict';
            document.querySelector('.needs-validation').addEventListener('submit', function (event) {
                if (!this.checkValidity()) {
                    event.preventDefault();
                    event.stopPropagation();
                }
                this.classList.add('was-validated');
            }, false);
        })();

        $(function () {
            $('#PhoneNumber').inputmask({
                mask: '+7 (999) 999-99-99',
                showMaskOnHover: false
            });
        });

        document.querySelectorAll('.toggle-password').forEach(button => {
            button.addEventListener('click', function () {
                const icon = this.querySelector('i');
                const input = this.closest('.input-group').querySelector('input');

                if (input.type === 'password') {
                    input.type = 'text';
                    icon.classList.replace('bi-eye-slash', 'bi-eye');
                } else {
                    input.type = 'password';
                    icon.classList.replace('bi-eye', 'bi-eye-slash');
                }
            });
        });

        document.addEventListener("DOMContentLoaded", function () {
            const form = document.querySelector("form.needs-validation");

            form.addEventListener("submit", function (event) {
                event.preventDefault();

                const formData = new FormData(form);

                fetch(form.action, {
                    method: "POST",
                    body: formData
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error("Ошибка сети или сервера");
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            window.location.href = data.redirectUrl;
                        } else {
                            showToast(data.message, "danger");
                        }
                    })
                    .catch(error => {
                        showToast("Произошла ошибка при обработке запроса: " + error.message, "danger");
                    });
            });
        });

        function showToast(message, type = "success") {
            let toastContainer = document.querySelector(".toast-container");
            if (!toastContainer) {
                toastContainer = document.createElement("div");
                toastContainer.className = "toast-container position-fixed top-0 end-0 p-3";
                document.body.appendChild(toastContainer);
            }

            const toast = document.createElement("div");
            toast.className = `toast show align-items-center text-white bg-${type} border-0`;
            toast.setAttribute("role", "alert");
            toast.setAttribute("aria-live", "assertive");
            toast.setAttribute("aria-atomic", "true");

            toast.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">${message}</div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Закрыть"></button>
                </div>
            `;

            toast.querySelector("button").addEventListener("click", () => toast.remove());
            toastContainer.appendChild(toast);

            setTimeout(() => toast.remove(), 5000);
        }

        function sendNewCode() {
            $.post('/User/SendConfirmationCode', { userId: @APIClient.User.Id }, function () {
                alert('Проверьте вашу электронную почту');
            });
        }

        function confirmEmail() {
            var code = $('#confirmCode').val().trim();

            if (!code) {
                alert("Введите код подтверждения");
                return;
            }

            $.get('/User/ConfirmEmail', {
                userId: @APIClient.User.Id,
                code: code
            }, function (response) {
                if (response && response.success) {
                    alert(response.message || "Email успешно подтверждён");
                    location.href = '/User/UserProfileEdit?id=@APIClient.User.Id';
                } else {
                    alert(response?.message || "Неверный код подтверждения");
                }
            }).fail(function (xhr) {
                alert(xhr.responseJSON?.message || "Ошибка сервера");
            });
        }

        document.querySelectorAll('.toggle-password').forEach(button => {
            button.addEventListener('click', function () {
                const input = this.parentElement.querySelector('input');
                const icon = this.querySelector('i');

                if (input.type === 'password') {
                    input.type = 'text';
                    icon.classList.remove('bi-eye');
                    icon.classList.add('bi-eye-slash');
                } else {
                    input.type = 'password';
                    icon.classList.remove('bi-eye-slash');
                    icon.classList.add('bi-eye');
                }
            });
        });

        function resetPassword() {
            const newPass = $('#newPassword').val().trim();
            const newPassConfirm = $('#newPasswordConfirmation').val().trim();

            if (!newPass || !newPassConfirm) {
                showAlert('Введите пароль и подтверждение', 'danger');
                return;
            }

            if (newPass !== newPassConfirm) {
                showAlert('Пароли не совпадают', 'danger');
                return;
            }

            if (!@Json.Serialize(APIClient.User?.IsEmailConfirmed ?? false)) {
                showAlert('Сначала подтвердите электронную почту', 'warning');
                return;
            }

            $.post('/User/ResetPassword', { newPass: newPass })
                .done(function (response) {
                    if (response?.success) {
                        showAlert(response.message || 'Пароль успешно изменен', 'success');
                        $('#resetPasswordModal').modal('hide');
                        if (response.redirectUrl) {
                            setTimeout(() => location.href = response.redirectUrl, 1500);
                        }
                    } else {
                        showAlert(response?.message || 'Ошибка при изменении пароля', 'danger');
                    }
                })
                .fail(function (xhr) {
                    showAlert(xhr.responseJSON?.message || 'Ошибка сервера', 'danger');
                });
        }

        function showAlert(message, type) {
            const alertHtml = `<div class="alert alert-${type} alert-dismissible fade show" role="alert">
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>`;

            $('#resetPasswordModal .modal-body').prepend(alertHtml);

            setTimeout(() => $('.alert').alert('close'), 5000);
        }
    </script>
}