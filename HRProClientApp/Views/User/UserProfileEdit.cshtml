@using HRProContracts.ViewModels
@model UserViewModel

@{
    var title = Model?.Id <= 0 ? "Добавить сотрудника" : "Редактировать профиль";
    var userRole = APIClient.User?.Role == HRProDataModels.Enums.RoleEnum.Администратор;
}

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <h2 class="mb-4">@title</h2>
            <form method="post" class="needs-validation" novalidate>
                <input type="hidden" name="id" value="@Model?.Id" />
                <input type="hidden" name="CompanyId" value="@Model?.CompanyId" />
                <input type="hidden" name="Role" value="@Model?.Role" />
                @if (Model?.Id > 0)
                {
                    <input type="hidden" name="password" value="@Model?.Password" />
                }

                <div class="mb-3">
                    <label for="Surname" class="form-label">Фамилия <span class="text-danger">*</span></label>
                    <input type="text" class="form-control" id="Surname" name="Surname" value="@Model?.Surname" required />
                    <div class="invalid-feedback">Пожалуйста, укажите фамилию</div>
                </div>

                <div class="mb-3">
                    <label for="Name" class="form-label">Имя <span class="text-danger">*</span></label>
                    <input type="text" class="form-control" id="Name" name="Name" value="@Model?.Name" required />
                    <div class="invalid-feedback">Пожалуйста, укажите имя</div>
                </div>

                <div class="mb-3">
                    <label for="LastName" class="form-label">Отчество</label>
                    <input type="text" class="form-control" id="LastName" name="LastName" value="@Model?.LastName" />
                </div>

                <div class="mb-3">
                    <label for="Email" class="form-label">Электронная почта <span class="text-danger">*</span></label>
                    <input type="email" class="form-control" id="Email" name="Email" value="@Model?.Email"
                    @(Model?.Id > 0 ? "readonly" : "") required />
                    <div class="invalid-feedback">Пожалуйста, укажите корректный email</div>
                </div>

                <div class="mb-3">
                    <label for="dateOfBirth" class="form-label">Дата рождения <span class="text-danger">*</span></label>
                    <input type="date" class="form-control" id="dateOfBirth" name="dateOfBirth"
                           max="@DateTime.Now.ToString("yyyy-MM-dd")"
                           value="@Model?.DateOfBirth.ToString()" required>
                    <div class="invalid-feedback">Выберите корректную дату рождения</div>
                </div>

                @if (Model?.Id <= 0)
                {
                    <div class="mb-3">
                        <label for="Password" class="form-label">Пароль <span class="text-danger">*</span></label>
                        <div class="input-group">
                            <input type="password" class="form-control" id="Password" name="Password" required />
                            <button class="btn btn-outline-secondary toggle-password" type="button">
                                <i class="bi bi-eye-slash"></i>
                            </button>
                        </div>
                        <div class="form-text">
                            Пароль должен содержать:
                            <ul class="list-unstyled">
                                <li><small>- Не менее 8 символов</small></li>
                                <li><small>- Буквы в верхнем и нижнем регистре</small></li>
                                <li><small>- Хотя бы одну цифру</small></li>
                                <li><small>- Хотя бы один специальный символ</small></li>
                            </ul>
                        </div>
                        <div class="invalid-feedback">Пароль не соответствует требованиям</div>
                    </div>
                }

                <div class="mb-3">
                    <label for="PhoneNumber" class="form-label">Телефон</label>
                    <input type="tel" class="form-control" id="PhoneNumber" name="PhoneNumber"
                           value="@Model?.PhoneNumber" />
                </div>

                <div class="d-flex justify-content-between mt-4">
                    <button type="submit" class="btn btn-primary">Сохранить</button>
                    <button type="button" class="btn btn-secondary" onclick="window.history.back()">Назад</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .btn {
            background-color: #0A1128;
            color: white;
            border: none;
            border-radius: 10px;
            padding: 12px;
            font-size: 16px;
            transition: background-color 0.3s ease, transform 0.2s ease;
        }

            .btn:hover {
                background-color: #1C3273;
                transform: scale(1.05);
            }

        .toggle-password {
            border-top-left-radius: 0;
            border-bottom-left-radius: 0;
        }
    </style>
}

@section Scripts {
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.inputmask/5.0.7-beta.29/jquery.inputmask.min.js"></script>

    <script>
        // Валидация формы
        (function () {
            'use strict';
            document.querySelector('.needs-validation').addEventListener('submit', function (event) {
                if (!this.checkValidity()) {
                    event.preventDefault();
                    event.stopPropagation();
                }
                this.classList.add('was-validated');
            }, false);
        })();

        // Маска для телефона
        $(function () {
            $('#PhoneNumber').inputmask({
                mask: '+7 (999) 999-99-99',
                showMaskOnHover: false
            });
        });

        // Переключение видимости пароля
        document.querySelectorAll('.toggle-password').forEach(button => {
            button.addEventListener('click', function () {
                const icon = this.querySelector('i');
                const input = this.closest('.input-group').querySelector('input');

                if (input.type === 'password') {
                    input.type = 'text';
                    icon.classList.replace('bi-eye-slash', 'bi-eye');
                } else {
                    input.type = 'password';
                    icon.classList.replace('bi-eye', 'bi-eye-slash');
                }
            });
        });

        // Обработка отправки формы
        document.querySelector('form').addEventListener('submit', async function (e) {
            e.preventDefault();

            const form = e.target;
            const submitButton = form.querySelector('button[type="submit"]');
            const originalButtonText = submitButton.innerHTML;

            try {
                submitButton.disabled = true;
                submitButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status"></span> Сохранение...';

                const response = await fetch(form.action, {
                    method: 'POST',
                    body: new FormData(form),
                    headers: {
                        'Accept': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest' // Добавляем этот заголовок
                    }
                });

                // Проверяем Content-Type ответа
                const contentType = response.headers.get('content-type');

                if (!response.ok) {
                    throw new Error('Ошибка сервера');
                }

                if (!contentType || !contentType.includes('application/json')) {
                    throw new Error('Неверный формат ответа');
                }

                const result = await response.json();

                if (result.success) {
                    window.location.href = result.redirectUrl || '/';
                } else {
                    showError(result.error, result.message);
                    showToast('Ошибка', result.message, 'danger');
                }
            } catch (error) {
                // Обработка разных типов ошибок
                if (error instanceof SyntaxError) {
                    showToast('Ошибка', 'Сервер вернул невалидный ответ', 'danger');
                } else {
                    showToast('Ошибка', error.message || 'Произошла ошибка при отправке формы', 'danger');
                }
                console.error('Error:', error);
            } finally {
                submitButton.disabled = false;
                submitButton.innerHTML = originalButtonText;
            }
        });

        // Функция для показа уведомлений
        function showToast(message, type = 'success') {
            const toast = document.createElement('div');
            toast.className = `toast align-items-center text-white bg-${type} border-0`;
            toast.innerHTML = `
                        <div class="d-flex">
                            <div class="toast-body">${message}</div>
                            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                        </div>
                    `;

            const container = document.querySelector('.toast-container') || (() => {
                const div = document.createElement('div');
                div.className = 'toast-container position-fixed top-0 end-0 p-3';
                document.body.appendChild(div);
                return div;
            })();

            container.appendChild(toast);
            new bootstrap.Toast(toast).show();

            setTimeout(() => toast.remove(), 5000);
        }
    </script>
}