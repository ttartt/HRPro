@using HRProContracts.ViewModels
@using HRProDataModels.Enums
@using Newtonsoft.Json
@model VacancyViewModel

@{
    var title = @Model.Id <= 0 ? "Создать вакансию" : "Редактировать вакансию";
}

<div class="container">
    <h1>@title</h1>
    <form method="post" class="row g-3 needs-validation" novalidate>
        <input type="hidden" name="id" value="@Model?.Id" />
        <input type="hidden" name="CompanyId" value="@Model?.CompanyId" />

        <div class="col-md-6">
            <label for="JobTitle" class="form-label">Название должности <span class="text-danger">*</span></label>
            <input type="text" class="form-control" id="JobTitle" name="JobTitle" value="@Model?.JobTitle" required placeholder="Введите название должности">
            <div class="invalid-feedback">Пожалуйста, введите название должности.</div>
        </div>

        <div class="col-md-6">
            <label for="description" class="form-label">Описание</label>
            <textarea class="form-control" id="description" name="description" rows="3" placeholder="Введите описание вакансии">@Model?.Description</textarea>
        </div>

        <div class="col-md-6">
            <label asp-for="JobType" class="form-label">Тип занятости</label>
            <select asp-for="JobType" class="form-control" asp-items="@GetJobTypeSelectList()"></select>
        </div>

        <div class="col-md-6">
            <label for="salary" class="form-label">Заработная плата (руб.)</label>
            <input type="text" class="form-control" id="salary" name="salary" value="@Model?.Salary" placeholder="Введите заработную плату или поставьте '-'">
        </div>

        <div class="col-md-6">
            <label asp-for="Status" class="form-label">Статус вакансии</label>
            <select asp-for="Status" class="form-control" asp-items="@GetStatusSelectList()"></select>
        </div>

        <div class="col-md-6">
            <label for="tags" class="form-label">Тэги</label>
            <input type="text" class="form-control" id="tags" name="tags" value="@Model?.Tags" placeholder="Введите тэги через пробел">
        </div>
        <div class="d-flex justify-content-between">
            <button type="submit" class="btn btn-primary">Сохранить</button>
            <button class="btn btn-secondary" onclick="window.history.back();">Назад</button>
        </div>

    </form>
   @*  <form method="post" asp-controller="Requirement" asp-action="AddVacancyRequirement">
        <input type="hidden" name="vacancyId" value="@Model.Id" />

        <div id="requirement-container">
            <div id="existing-requirements-container">
                @if (Model.Requirements.Any())
                {
                    foreach (var requirement in Model.Requirements)
                    {
                        <p> - @requirement.Name</p>
                    }
                }
                else
                {
                    <p>Требований нет.</p>
                }
            </div>

            <div id="new-requirement-container">
                <div class="row mb-3 requirement-row">
                    <div class="col-8">
                        <select name="requirement" class="form-control">
                            <option value="">Выберите требование</option>
                            @if (ViewBag.Requirements is List<RequirementViewModel> requirements)
                            {
                                foreach (var requirement in requirements)
                                {
                                    <option value="@requirement.Id">@requirement.Name</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="col-md-1 d-flex align-items-center">
                        <button type="button" class="btn btn-danger btn-sm remove-requirement">Х</button>
                    </div>
                </div>
            </div>

            <button type="button" class="btn btn-outline-secondary mt-2" id="add-requirement">Добавить требование</button>

            <button type="submit" class="btn btn-success mt-3">Сохранить</button>

        </div>
    </form>

    <form method="post" asp-controller="Responsibility" asp-action="AddVacancyResponsibility">
        <input type="hidden" name="vacancyId" value="@Model.Id" />

        <div id="responsibilities-container">
            <div id="existing-responsibility-container">
                @if (Model.Responsibilities.Any())
                {
                    foreach (var responsibility in Model.Responsibilities)
                    {
                        <p> - @responsibility.Name</p>
                    }
                }
                else
                {
                    <p>Обязанностей нет.</p>
                }
            </div>

            <div id="new-responsibility-container">
                <div class="row mb-3 responsibility-row">
                    <div class="col-8">
                        <select name="responsibility" class="form-control">
                            <option value="">Выберите обязанность</option>
                            @if (ViewBag.Responsibilities is List<ResponsibilityViewModel> responsibilities)
                            {
                                foreach (var responsibility in responsibilities)
                                {
                                    <option value="@responsibility.Id">@responsibility.Name</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="col-md-1 d-flex align-items-center">
                        <button type="button" class="btn btn-danger btn-sm remove-responsibility">Х</button>
                    </div>
                </div>
            </div>

            <button type="button" class="btn btn-outline-secondary mt-2" id="add-responsibility">Добавить обязанность</button>

            <button type="submit" class="btn btn-success mt-3">Сохранить</button>

        </div>
    </form> *@
</div>

<script>
    const requirements = @Html.Raw(JsonConvert.SerializeObject(ViewBag.Requirements));

    document.getElementById('add-requirement').addEventListener('click', function () {
        const container = document.getElementById('new-requirement-container');
        const existingRequirements = Array.from(container.querySelectorAll('select[name="requirement"]')).map(select => select.value);

        const newRow = document.createElement('div');
        newRow.className = 'row mb-3 requirement-row';

        let selectOptions = '<option value="">Выберите требование</option>';
        requirements.forEach(requirement => {
            if (!existingRequirements.includes(requirement.Id.toString())) {
                selectOptions += <option value="${requirement.Id}" > ${ requirement.Name } </option>;
            }
        });

        newRow.innerHTML =
            <div class="col-8" >
                <select name="requirement" class="form-control" > ${ selectOptions } </select>
                    < /div>
                    < div class="col-md-1 d-flex align-items-center" >
                        <button type="button" class="btn btn-danger btn-sm remove-requirement" >✕</button>
                            < /div>
            ;

        container.appendChild(newRow);
        attachRemoveEvent(newRow.querySelector('.remove-requirement'));
    });

    function attachRemoveEvent(button) {
        button.addEventListener('click', function () {
            const container = document.getElementById('new-requirements-container');
            const rows = container.querySelectorAll('.requirement-row');
            if (rows.length > 1) {
                button.closest('.requirement-row').remove();
            } else {
                alert('Должно быть хотя бы одно требование.');
            }
        });
    }

    document.querySelectorAll('.remove-requirement').forEach(button => attachRemoveEvent(button));
</script>

<script>
    const responsibilitys = @Html.Raw(JsonConvert.SerializeObject(ViewBag.Responsibilities));

    document.getElementById('add-responsibility').addEventListener('click', function () {
        const container = document.getElementById('new-responsibility-container');
        const existingResponsibilities = Array.from(container.querySelectorAll('select[name="responsibility"]')).map(select => select.value);

        const newRow = document.createElement('div');
        newRow.className = 'row mb-3 responsibility-row';

        let selectOptions = '<option value="">Выберите обязанность</option>';
        responsibilitys.forEach(responsibility => {
            if (!existingResponsibilities.includes(responsibility.Id.toString())) {
                selectOptions += <option value="${responsibility.Id}" > ${ responsibility.Name } </option>;
            }
        });

        newRow.innerHTML =
            <div class="col-8" >
                <select name="responsibility" class="form-control" > ${ selectOptions } </select>
                    < /div>
                    < div class="col-md-1 d-flex align-items-center" >
                        <button type="button" class="btn btn-danger btn-sm remove-responsibility" >✕</button>
                            < /div>
            ;

        container.appendChild(newRow);
        attachRemoveEvent(newRow.querySelector('.remove-responsibility'));
    });

    function attachRemoveEvent(button) {
        button.addEventListener('click', function () {
            const container = document.getElementById('new-responsibilities-container');
            const rows = container.querySelectorAll('.responsibility-row');
            if (rows.length > 1) {
                button.closest('.responsibility-row').remove();
            } else {
                alert('Должна быть хотя бы одна обязанность.');
            }
        });
    }

    document.querySelectorAll('.remove-responsibility').forEach(button => attachRemoveEvent(button));
</script>

@functions {
    public SelectList GetJobTypeSelectList()
    {
        return new SelectList(Enum.GetValues(typeof(JobTypeEnum)).Cast<JobTypeEnum>());
    }

    public SelectList GetStatusSelectList()
    {
        return new SelectList(Enum.GetValues(typeof(VacancyStatusEnum)).Cast<VacancyStatusEnum>());
    }
}

<script>
    (function () {
        'use strict'

        var forms = document.querySelectorAll('.needs-validation')

        Array.prototype.slice.call(forms)
            .forEach(function (form) {
                form.addEventListener('submit', function (event) {
                    if (!form.checkValidity()) {
                        event.preventDefault()
                        event.stopPropagation()
                    }

                    form.classList.add('was-validated')
                }, false)
            })
    })()
</script>

<style>
    .btn {
        background-color: #3E12E3;
        color: white;
        border: none;
        border-radius: 10px;
        padding: 12px;
        font-size: 16px;
        transition: background-color 0.3s ease, transform 0.2s ease;
    }

        .btn:hover {
            background-color: #2200A4;
            transform: scale(1.05);
        }
</style>