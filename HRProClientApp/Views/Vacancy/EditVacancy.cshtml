@using HRProContracts.ViewModels
@using HRProDataModels.Enums
@using Newtonsoft.Json
@model VacancyViewModel

@{
    var title = @Model.Id <= 0 ? "Создать вакансию" : "Редактировать вакансию";
}

<div class="container">
    <h1>@title</h1>
    <form method="post" class="row g-3 needs-validation" novalidate>
        <input type="hidden" name="id" value="@Model?.Id" />
        <input type="hidden" name="CompanyId" value="@Model?.CompanyId" />

        <div class="col-md-6">
            <label for="JobTitle" class="form-label">Название должности <span class="text-danger">*</span></label>
            <input type="text" class="form-control" id="JobTitle" name="JobTitle" value="@Model?.JobTitle" required placeholder="Введите название должности">
            <div class="invalid-feedback">Пожалуйста, введите название должности.</div>
        </div>

        <div class="col-md-6">
            <label for="description" class="form-label">Описание</label>
            <textarea class="form-control" id="description" name="description" rows="3" placeholder="Введите описание вакансии">@Model?.Description</textarea>
        </div>

        <div class="col-md-6">
            <label asp-for="JobType" class="form-label">Тип занятости</label>
            <select asp-for="JobType" class="form-control" asp-items="@GetJobTypeSelectList()" required></select>
            
        </div>

        <div class="col-md-6">
            <label for="salary" class="form-label">Заработная плата (руб.)</label>
            <input type="text" class="form-control" id="salary" name="salary" value="@Model?.Salary" placeholder="Введите заработную плату или поставьте '-'">
        </div>

        <div class="col-md-6">
            <label asp-for="Status" class="form-label">Статус вакансии</label>
            <select asp-for="Status" class="form-control" asp-items="@GetStatusSelectList()" required></select>
        </div>

        <div class="col-md-6">
            <label for="tags" class="form-label">Тэги</label>
            <input type="text" class="form-control" id="tags" name="tags" value="@Model?.Tags" placeholder="Введите тэги через пробел">
        </div>
        <div class="d-flex justify-content-between">
            <button type="submit" class="btn btn-primary">Сохранить</button>
            <button class="btn btn-secondary" onclick="window.history.back();">Назад</button>
        </div>

    </form>
</div>


@functions {
    public SelectList GetJobTypeSelectList()
    {
        var jobTypes = Enum.GetValues(typeof(JobTypeEnum)).Cast<JobTypeEnum>().ToList();
        return new SelectList(jobTypes, "Выберите тип занятости...");
    }

    public SelectList GetStatusSelectList()
    {
        var statuses = Enum.GetValues(typeof(VacancyStatusEnum)).Cast<VacancyStatusEnum>().ToList();
        return new SelectList(statuses, "Выберите статус...");
    }
}

<script>
    (function () {
        'use strict'

        var forms = document.querySelectorAll('.needs-validation')

        Array.prototype.slice.call(forms)
            .forEach(function (form) {
                form.addEventListener('submit', function (event) {
                    if (!form.checkValidity()) {
                        event.preventDefault()
                        event.stopPropagation()
                    }

                    form.classList.add('was-validated')
                }, false)
            })
    })()

    document.addEventListener("DOMContentLoaded", function () {
        const form = document.querySelector("form.needs-validation");

        form.addEventListener("submit", function (event) {
            event.preventDefault();

            const formData = new FormData(form);

            fetch(form.action, {
                method: "POST",
                body: formData
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error("Ошибка сети или сервера");
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        window.location.href = data.redirectUrl;
                    } else {
                        showToast(data.message, "danger");
                    }
                })
                .catch(error => {
                    showToast("Произошла ошибка при обработке запроса: " + error.message, "danger");
                });
        });
    });

    function showToast(message, type = "success") {
        let toastContainer = document.querySelector(".toast-container");
        if (!toastContainer) {
            toastContainer = document.createElement("div");
            toastContainer.className = "toast-container position-fixed top-0 end-0 p-3";
            document.body.appendChild(toastContainer);
        }

        const toast = document.createElement("div");
        toast.className = `toast show align-items-center text-white bg-${type} border-0`;
        toast.setAttribute("role", "alert");
        toast.setAttribute("aria-live", "assertive");
        toast.setAttribute("aria-atomic", "true");

        toast.innerHTML = `
                    <div class="d-flex">
                        <div class="toast-body">${message}</div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Закрыть"></button>
                    </div>
                `;

        toast.querySelector("button").addEventListener("click", () => toast.remove());
        toastContainer.appendChild(toast);

        setTimeout(() => toast.remove(), 5000);
    }
</script>

<style>
    .btn {
        background-color: #3E12E3;
        color: white;
        border: none;
        border-radius: 10px;
        padding: 12px;
        font-size: 16px;
        transition: background-color 0.3s ease, transform 0.2s ease;
    }

        .btn:hover {
            background-color: #2200A4;
            transform: scale(1.05);
        }
</style>