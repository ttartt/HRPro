@using Microsoft.AspNetCore.Mvc.TagHelpers
@using HRProContracts.ViewModels
@model VacancyViewModel

@{
    ViewData["Title"] = "Информация о вакансии";
    bool userRole = APIClient.User?.Role == HRProDataModels.Enums.RoleEnum.Сотрудник || APIClient.User.Role == HRProDataModels.Enums.RoleEnum.Администратор;
    var resumes = ViewBag.Resumes as List<ResumeViewModel>;
    var cities = ViewBag.Cities as List<CityViewModel>;
}

<div class="container mt-5">
    <div class="d-flex justify-content-between mb-4">
        <div class="card-header">
            <h2>@Model.JobTitle</h2>
        </div>
        
        <div class="row mb-3">
            <div class="col-md-4">
                <label for="search" class="form-label">Поиск по названию</label>
                <input type="text" id="search" class="form-control" placeholder="Введите название..." oninput="filterResumes()">
            </div>
            <div class="col-md-4">
                <label for="sortDate" class="form-label">Сортировка по дате</label>
                <select id="sortDate" class="form-select" onchange="sortResumes()">
                    <option value="desc">Сначала новые</option>
                    <option value="asc">Сначала старые</option>
                </select>
            </div>
            <div class="col-md-4">
                <button class="btn btn-success mt-4" data-bs-toggle="modal" data-bs-target="#collectModal">
                    <i class="bi bi-download"></i> Собрать резюме на эту вакансию
                </button>
            </div>
        </div>
       @*  <form asp-controller="Vacancy" asp-action="GetStatistics" method="get" class="row g-3 needs-validation" novalidate>
            <input type="hidden" name="id" value="@Model.Id" />
            <div class="col-md-4">
                <div class="form-group">
                    <label for="dateFrom">Дата начала</label>
                    <input type="date" class="form-control" id="dateFrom" name="dateFrom" required />
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    <label for="dateTo">Дата окончания</label>
                    <input type="date" class="form-control" id="dateTo" name="dateTo" required />
                </div>
            </div>
            <button type="submit" class="btn btn-primary">Скачать статистику</button>
        </form> *@
    </div>

    <div class="card shadow-sm mb-4">
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <dl class="row">
                        <dt class="col-sm-4">Компания:</dt>
                        <dd class="col-sm-8">@Model.CompanyName</dd>

                        <dt class="col-sm-4">Тип занятости:</dt>
                        <dd class="col-sm-8">@Model.JobType</dd>

                        <dt class="col-sm-4">Зарплата:</dt>
                        <dd class="col-sm-8">@Model.Salary</dd>

                        <dt class="col-sm-4">Дата публикации:</dt>
                        <dd class="col-sm-8">@Model.CreatedAt.ToShortDateString()</dd>

                        <dt class="col-sm-4">Статус:</dt>
                        <dd class="col-sm-8">@Model.Status</dd>

                        <dt class="col-sm-4">Теги:</dt>
                        <dd class="col-sm-8" id="tags">@Model.Tags</dd>
                    </dl>
                </div>
                <div class="col-md-6">
                    <dl class="row">
                        <dt class="col-sm-4">Описание:</dt>
                        <dd class="col-sm-8">@Html.Raw(Model.Description)</dd>
                    </dl>
                </div>
            </div>
        </div>
    </div>

    <table class="table table-striped" id="resumesTable">
        <thead>
            <tr>
                <th>Название</th>
                <th>Зарплата</th>
                <th>Кандидат</th>
                <th>Город</th>
                <th>Действия</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var resume in resumes)
            {
                var cityName = cities?.FirstOrDefault(c => c.Code == resume.City)?.Name ?? "Неизвестен";
                <tr>
                    <td>@resume.Title</td>
                    <td>@resume.Salary</td>
                    <td>@resume.CandidateInfo</td>
                    <td>@cityName</td>
                    <td>
                        <div class="d-flex justify-content-center gap-2">
                            <a asp-action="ResumeDetails" asp-controller="Resume" asp-route-id="@resume.Id"
                               class="btn btn-info btn-sm" title="Подробнее">
                                <i class="bi bi-eye"></i>
                            </a>

                            @if (!string.IsNullOrEmpty(resume.Url))
                            {
                                <a href="@resume.Url"
                                   class="btn btn-primary btn-sm"
                                   title="Перейти к резюме"
                                   target="_blank">
                                    <i class="bi bi-box-arrow-up-right"></i>
                                </a>
                            }
                            else
                            {
                                <button class="btn btn-secondary btn-sm" disabled
                                        title="Ссылка не указана">
                                    <i class="bi bi-box-arrow-up-right"></i>
                                </button>
                            }

                            <a asp-action="Delete" asp-controller="Resume" asp-route-id="@resume.Id"
                               class="btn btn-danger btn-sm"
                               title="Удалить"
                               onclick="return confirm('Вы уверены, что хотите удалить резюме?');">
                                <i class="bi bi-trash"></i>
                            </a>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    @if (!resumes.Any())
    {
        <div class="alert alert-info">Нет доступных резюме.</div>
    }

    <nav aria-label="Page navigation" id="paginationContainer">
        <ul class="pagination justify-content-center" id="pagination">
        </ul>
    </nav>
</div>

<div class="modal fade" id="collectModal" tabindex="-1" aria-labelledby="collectModalLabel" aria-modal="true" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <form id="collectResumeForm" novalidate>
                <div class="modal-header">
                    <h5 class="modal-title" id="collectModalLabel">Выберите город</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Закрыть"></button>
                </div>
                <div class="modal-body">
                    <label for="cityName" class="form-label">Город:</label>
                    <select id="cityName" name="cityName" class="form-select">
                        @foreach (var city in cities)
                        {
                            <option value="@city.Code">@city.Name</option>
                        }
                    </select>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
                    <button type="submit" class="btn btn-info" id="collectButton">Начать сбор</button>
                </div>
            </form>
        </div>
    </div>
</div>

<div id="modalLoader" class="d-none" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(255,255,255,0.7); z-index: 9999; display: flex; justify-content: center; align-items: center;" inert>
    <div class="text-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Загрузка...</span>
        </div>
        <p class="mt-2">Сбор резюме...</p>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    const itemsPerPage = 10;
    let currentPage = 1;
    let allResumes = @Html.Raw(Json.Serialize(resumes));
    let sortOrder = 'desc';

    const citiesMap = {
    @foreach (var city in ViewBag.Cities)
    {
        @:"@city.Code": "@city.Name",
    }
            };

    document.addEventListener('DOMContentLoaded', function () {
        updateTable();
        setupPagination();

        document.getElementById('collectResumeForm').addEventListener('submit', async function (e) {
            e.preventDefault();

            const modal = document.getElementById('collectModal');
            const modalLoader = document.getElementById('modalLoader');
            const collectButton = document.getElementById('collectButton');

            modalLoader.classList.remove('d-none');
            collectButton.disabled = true;

            const cityName = document.getElementById('cityName').value;
            const tags = document.getElementById('tags').innerText;
            const vacancyId = Model.Id;

            try {
                const response = await fetch(`/Resume/CollectResume?cityName=${cityName}&tags=${tags}&vacancyId=${vacancyId}`);
                const data = await response.json();

                if (data.success) {
                    showToast(data.message, "success");

                    if (data.resumes && data.resumes.length > 0) {
                        const newResumes = data.resumes.map(r => ({
                            ...r,
                            createdAt: new Date(r.createdAt).toISOString()
                        }));

                        allResumes = [...newResumes, ...allResumes];

                        currentPage = 1;
                        updateTable();
                        setupPagination();
                    }

                    setTimeout(() => {
                        const modalInstance = bootstrap.Modal.getInstance(modal);
                        modalInstance.hide();
                    }, 1500);
                } else {
                    showToast(data.message, "danger");
                }
            } catch (error) {
                showToast("Ошибка сети: " + error.message, "danger");
            } finally {
                modalLoader.classList.add('d-none');
                collectButton.disabled = false;
            }
        });
    });


    function sortResumes() {
        sortOrder = document.getElementById('sortDate').value;
        applySorting();
        updateTable();
    }

    function applySorting() {
        allResumes.sort((a, b) => {
            const dateA = new Date(a.createdAt);
            const dateB = new Date(b.createdAt);
            return sortOrder === 'desc' ? dateB - dateA : dateA - dateB;
        });
    }

    document.addEventListener('DOMContentLoaded', function () {
        applySorting();
        updateTable();
        setupPagination();
    });

    function updateTable() {
        const tableBody = document.querySelector("#resumesTable tbody");
        tableBody.innerHTML = "";

        const startIndex = (currentPage - 1) * itemsPerPage;
        const endIndex = startIndex + itemsPerPage;
        const paginatedResumes = allResumes.slice(startIndex, endIndex);

        paginatedResumes.forEach(resume => {
            const cityName = citiesMap[resume.city] || 'Неизвестен';
            const row = `
                        <tr>
                            <td>${resume.title ?? 'Нет данных'}</td>
                            <td>${resume.salary ?? 'Нет данных'}</td>
                            <td>${resume.candidateInfo ?? 'Нет данных'}</td>
                            <td>${cityName}</td>
                                <td>
                            <div class="d-flex justify-content-center gap-2">
                                <a href="/Resume/ResumeDetails/${resume.id}"
                                   class="btn btn-info btn-sm" title="Подробнее">
                                    <i class="bi bi-eye"></i>
                                </a>

                                ${resume.url
                    ? `<a href="${resume.url}"
                                            class="btn btn-primary btn-sm"
                                            title="Перейти к резюме"
                                            target="_blank">
                                            <i class="bi bi-box-arrow-up-right"></i>
                                          </a>`
                    : `<button class="btn btn-secondary btn-sm" disabled
                                              title="Ссылка не указана">
                                              <i class="bi bi-box-arrow-up-right"></i>
                                           </button>`
                }

                                <a href="/Resume/Delete/${resume.id}"
                                   class="btn btn-danger btn-sm"
                                   title="Удалить"
                                   onclick="return confirm('Вы уверены, что хотите удалить резюме?');">
                                    <i class="bi bi-trash"></i>
                                </a>
                            </div>
                        </td>
                        </tr>
                    `;
            tableBody.innerHTML += row;
        });
    }

    function formatDateTime(dateString) {
        const options = {
            timeZone: 'Europe/Ulyanovsk',
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        };
        return new Date(dateString).toLocaleString('ru-RU', options);
    }

    function setupPagination() {
        const pagination = document.getElementById('pagination');
        const pageCount = Math.ceil(allResumes.length / itemsPerPage);

        pagination.innerHTML = "";

        if (pageCount <= 1) {
            document.getElementById('paginationContainer').classList.add('d-none');
            return;
        }

        document.getElementById('paginationContainer').classList.remove('d-none');

        const prevLi = document.createElement('li');
        prevLi.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
        prevLi.innerHTML = `<a class="page-link" href="#" aria-label="Назад"><span aria-hidden="true">&laquo;</span></a>`;
        prevLi.addEventListener('click', (e) => {
            e.preventDefault();
            if (currentPage > 1) {
                currentPage--;
                updateTable();
                setupPagination();
            }
        });
        pagination.appendChild(prevLi);

        addPageItem(1);

        if (currentPage > 2) {
            const dotsLi = document.createElement('li');
            dotsLi.className = 'page-item disabled';
            dotsLi.innerHTML = `<a class="page-link" href="#">...</a>`;
            pagination.appendChild(dotsLi);
        }

        const startPage = Math.max(2, currentPage - 1);
        const endPage = Math.min(pageCount - 1, currentPage + 1);

        for (let i = startPage; i <= endPage; i++) {
            addPageItem(i);
        }

        if (currentPage < pageCount - 2) {
            const dotsLi = document.createElement('li');
            dotsLi.className = 'page-item disabled';
            dotsLi.innerHTML = `<a class="page-link" href="#">...</a>`;
            pagination.appendChild(dotsLi);
        }

        if (pageCount > 1) {
            addPageItem(pageCount);
        }

        const nextLi = document.createElement('li');
        nextLi.className = `page-item ${currentPage === pageCount ? 'disabled' : ''}`;
        nextLi.innerHTML = `<a class="page-link" href="#" aria-label="Вперед"><span aria-hidden="true">&raquo;</span></a>`;
        nextLi.addEventListener('click', (e) => {
            e.preventDefault();
            if (currentPage < pageCount) {
                currentPage++;
                updateTable();
                setupPagination();
            }
        });
        pagination.appendChild(nextLi);
    }

    function addPageItem(pageNumber) {
        const pagination = document.getElementById('pagination');
        const li = document.createElement('li');
        li.className = `page-item ${pageNumber === currentPage ? 'active' : ''}`;
        li.innerHTML = `<a class="page-link" href="#">${pageNumber}</a>`;

        li.addEventListener('click', (e) => {
            e.preventDefault();
            currentPage = pageNumber;
            updateTable();
            setupPagination();
            window.scrollTo({ top: 0, behavior: 'smooth' });
        });

        pagination.appendChild(li);
    }

    function filterResumes() {
        const searchInput = document.getElementById('search').value.toLowerCase();
        const table = document.getElementById('resumesTable');
        const rows = table.querySelectorAll('tbody tr');

        rows.forEach(row => {
            const titleCell = row.children[0].textContent.toLowerCase();
            row.style.display = titleCell.includes(searchInput) ? '' : 'none';
        });
    }

    function showToast(message, type = "success") {
        let toastContainer = document.querySelector(".toast-container");
        if (!toastContainer) {
            toastContainer = document.createElement("div");
            toastContainer.className = "toast-container position-fixed top-0 end-0 p-3";
            document.body.appendChild(toastContainer);
        }

        const toast = document.createElement("div");
        toast.className = `toast show align-items-center text-white bg-${type} border-0`;
        toast.setAttribute("role", "alert");
        toast.setAttribute("aria-live", "assertive");
        toast.setAttribute("aria-atomic", "true");

        toast.innerHTML = `
                    <div class="d-flex">
                        <div class="toast-body">${message}</div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Закрыть"></button>
                    </div>
                `;

        toast.querySelector("button").addEventListener("click", () => toast.remove());
        toastContainer.appendChild(toast);

        setTimeout(() => toast.remove(), 5000);
    }
</script>

<style>
    .table-hover tbody tr:hover {
        background-color: #f0f4f7;
        cursor: pointer;
    }

    .btn {
        background-color: #3E12E3;
        color: white;
        border: none;
        border-radius: 10px;
        padding: 12px;
        font-size: 16px;
        transition: background-color 0.3s ease, transform 0.2s ease;
    }

        .btn:hover {
            background-color: #2200A4;
            transform: scale(1.05);
        }

    .spinner-border {
        width: 3rem;
        height: 3rem;
    }

    .page-item.active .page-link {
        background-color: #3E12E3;
        border-color: #3E12E3;
    }

    .page-link {
        color: #3E12E3;
    }

    select {
        appearance: auto;
        -webkit-appearance: auto;
        -moz-appearance: auto;
    }

    #modalLoader {
        border-radius: 0.5rem;
    }

        #modalLoader .spinner-border {
            width: 2rem;
            height: 2rem;
        }

        #modalLoader p {
            margin-top: 0.5rem;
            font-size: 0.9rem;
            color: #333;
        }
</style>
