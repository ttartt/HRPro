@using HRProContracts.ViewModels
@using HRProDataModels.Enums
@using Newtonsoft.Json
@model DocumentViewModel

@{
    var title = "Документ";
}

<div class="container">
    <h1>@title</h1>
    <form method="post" class="row g-3 needs-validation" novalidate>
        <input type="hidden" name="id" value="@Model?.Id" />
        <input type="hidden" name="CompanyId" value="@Model?.CompanyId" />
        <input type="hidden" name="CreatorId" value="@Model?.CreatorId" />

        <div class="col-md-6">
            <label for="Name" class="form-label">Название документа <span class="text-danger">*</span></label>
            <input type="text" class="form-control" id="Name" name="Name" value="@Model?.Name" required placeholder="Введите название документа">
            <div class="invalid-feedback">Пожалуйста, введите название документа.</div>
        </div>

        <div class="col-md-6">
            <label asp-for="Status" class="form-label">Статус документа</label>
            <select asp-for="Status" class="form-select" asp-items="@GetStatusSelectList()"></select>
        </div>

        <div class="col-md-6">
            <label class="form-label">Выберите шаблон</label>
            <select id="templateSelect" class="form-select" name="TemplateId" onchange="updateTags()">
                <option value="">Выберите шаблон</option>
                @foreach (var template in ViewBag.Templates)
                {
                    <option value="@template.Id">@template.Name</option>
                }
            </select>
        </div>

        <div class="col-md-12">
            <label class="form-label">Теги шаблона</label>
            <div id="templateTagsContainer">
                @if (ViewBag.TemplateTags != null && ViewBag.TemplateTags.Count > 0)
                {
                    foreach (var tag in ViewBag.TemplateTags)
                    {
                        <div class="input-group mb-2">
                            <span class="input-group-text">@tag.TagName</span>
                            <input type="text" class="form-control tag-value" name="Tags[@tag.Id]" placeholder="Введите значение" value="@tag.TagValue">
                        </div>
                    }
                }
                else
                {
                    <span class="text-muted">Нет тегов</span>
                }
            </div>
        </div>


        <div class="d-flex justify-content-between">
            <button type="submit" class="btn btn-primary">Сохранить</button>
            <button type="button" class="btn btn-secondary" onclick="window.history.back();">Назад</button>
        </div>

    </form>
</div>

@functions {
    public SelectList GetStatusSelectList()
    {
        return new SelectList(Enum.GetValues(typeof(DocumentStatusEnum)).Cast<DocumentStatusEnum>());
    }
}

<script>
    function updateTags() {
        const templateId = document.getElementById("templateSelect").value;
        const container = document.getElementById("templateTagsContainer");

        if (!templateId) {
            container.innerHTML = '<span class="text-muted">Нет тегов</span>';
            return;
        }

        fetch(`/Document/LoadTags?templateId=${templateId}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(tags => {
                if (!tags || !Array.isArray(tags)) {
                    throw new Error('Invalid tags data received');
                }

                container.innerHTML = tags.length
                    ? tags.map(tag => {
                        const tagId = tag.id || tag.Id || '';
                        const tagName = tag.tagName || tag.TagName || 'Без названия';
                        const tagValue = tag.tagValue || tag.Value || '';

                        return `
                            <div class="input-group mb-2">
                                <span class="input-group-text">${tagName}</span>
                                <input type="text" class="form-control tag-value"
                                       name="Tags[${tagId}]"
                                       placeholder="Введите значение"
                                       value="${tagValue}">
                            </div>
                        `;
                    }).join("")
                    : '<span class="text-muted">Нет тегов</span>';
            })
            .catch(error => {
                console.error("Ошибка загрузки тегов:", error);
                container.innerHTML = `
                    <div class="alert alert-danger">
                        Ошибка загрузки тегов: ${error.message}
                    </div>
                `;
            });
    }

    document.addEventListener("DOMContentLoaded", function () {
        const form = document.querySelector("form.needs-validation");

        form.addEventListener("submit", function (event) {
            event.preventDefault();

            const formData = new FormData(form);

            fetch(form.action, {
                method: "POST",
                body: formData
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error("Ошибка сети или сервера");
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        window.location.href = data.redirectUrl;
                    } else {
                        showToast(data.message, "danger");
                    }
                })
                .catch(error => {
                    showToast("Произошла ошибка при обработке запроса: " + error.message, "danger");
                });
        });
    });

    function showToast(message, type = "success") {
        let toastContainer = document.querySelector(".toast-container");
        if (!toastContainer) {
            toastContainer = document.createElement("div");
            toastContainer.className = "toast-container position-fixed top-0 end-0 p-3";
            document.body.appendChild(toastContainer);
        }

        const toast = document.createElement("div");
        toast.className = `toast show align-items-center text-white bg-${type} border-0`;
        toast.setAttribute("role", "alert");
        toast.setAttribute("aria-live", "assertive");
        toast.setAttribute("aria-atomic", "true");

        toast.innerHTML = `
                    <div class="d-flex">
                        <div class="toast-body">${message}</div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Закрыть"></button>
                    </div>
                `;

        toast.querySelector("button").addEventListener("click", () => toast.remove());
        toastContainer.appendChild(toast);

        setTimeout(() => toast.remove(), 5000);
    }
</script>